# @defgroup Hairoad
#
# copyright Seppe Sels 2024
#
# This code is for internal use only (Uantwerpen, project members)
# Bugs, bugfixes and additions to the code need to be reported to Invilab (contact: Seppe Sels)
# @ingroup Hairoad
## This script reads the binary files and text files that are generated by the lidar and camera and converts them to a ply file.


import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')
from mpl_toolkits.mplot3d import Axes3D
from plyfile import PlyData, PlyElement
from scipy.ndimage import distance_transform_edt
from load_lidar_calibrate import *
import open3d as o3d
import vtk
import cv2

import numpy as np
import open3d as o3d
import os
from plyfile import PlyData, PlyElement

def reshape_points(points, width,height):


    # Calculate the number of points based on the width and height
    number_of_points = height  # Adjust if your definition of the frame changes


    # Read only the first frame data
    # filter out the first frame. select the first number_of_points from points_np
    points_np = points[0:number_of_points * 3]
    #remove the first numberofpoints from points_np
    points_new = points[number_of_points * 3:]
    points_frame = points_np[:number_of_points * 3].reshape(-1, 3)  # Reshape into Nx3

    # Assign the points and colors to the point cloud
    return points_new, points_frame


if __name__ == "__main__":

    # Example usage
    #pointcloud_file = r"Data\lidar3\test_2025_06_02__11_11_13_423067" # Example filename without extension
    #pointcloud_file = r"Data\lidar2\test_2025_06_02__11_10_43_538027"
    pointcloud_file = r"Data\lidar1\test_2025_06_02__11_10_12_992218"


    # Read the point cloud
    points_xyz_list, _ = read_point_cloud_from_files(pointcloud_file)

    # get the "image" and "colors" for a specific frame number and save to ply.
    framenumber = 2 # Change this to the desired frame number
    XYZ = points_xyz_list[framenumber]
    # Create an Open3D point cloud
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(XYZ)
    cl, ind = pcd.remove_statistical_outlier(nb_neighbors=30,
                                             std_ratio=2)
    # size of ind

    pcd = pcd.select_by_index(ind)


    # Load the image
    #image_path = r"Data\camera3_converted_undistort\test_2025-06-02_11-11-10\0101.jpeg" # Change to your image file
    #image_path = r"Data\camera2_converted_undistort\test_2025-06-02_11-10-41\0001.jpeg"# Change to your image file
    image_path =  r"Data\camera1_converted_undistort\test_2025-06-02_11-10-09\0001.jpeg"
    image = cv2.imread(image_path) #note undistorted image

    # if the image is not undistorted:
    from DataClass.calibration_core import *

    Calibrator = CameraParameters()
    Calibrator.load_parameters( r'Data/calib1.h5')
    Calibrator.calculate_undistort_map()
    image = Calibrator.remap_image(image)

    # load_transformation_matrix
    print("Loading Transformation Matrix:")

    transformation_matrix ,intrinsics  = load_transformation_matrix('transformation_and_intrinsics7.txt')


    print("Plotting:")
    project_and_color_pointcloud(image, transformation_matrix, intrinsics, XYZ,ind)
    print("Saving as PLY file:")
    save_as_ply(XYZ, colors, output_file)





